[tool.poetry]
name = "tkeir"
version = "1.0.3"
description = "t-keir-community"
authors = ["Eric Blaudez"]
maintainers = ["Eric Blaudez"]
license = "MIT"
keywords = ["Python"]
readme = "README.md"
packages = [
    { include = "tkeir", from = ".." },
]
classifiers = [
    "Environment :: Console",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.8",
    "Topic :: Software Development :: Libraries :: Python Modules"
]
homepage = "https://github.com/ThalesGroup/t-keir"
repository = "https://github.com/ThalesGroup/t-keir"
documentation = "https://github.com/ThalesGroup/t-keir"
include = [
    { path = "LICENSE" },
    { path = "runtimes" },
    { path = "tests"},
    { path = "app"},
    { path = "doc"},
]

[tool.poetry.urls]
Releases = "https://github.com/ThalesGroup/t-keir/releases"

[tool.poetry.dependencies]
beautifulsoup4="4.11.1"
elasticsearch="7.14.0"
mistune="2.0.4"
emoji="2.0.0"
fold-to-ascii="1.0.2.post1"
Django="4.1.13"
Jinja2="^3.1.4"
nltk="^3.7"
pandas="1.4.3"
prometheus-client="0.14.1"
protobuf="4.21.6"
sanic="22.6.2"
Sanic-Cors="2.1.0"
spacy="3.6.1"
en-core-web-sm = {url = "https://github.com/explosion/spacy-models/releases/download/en_core_web_sm-3.6.0/en_core_web_sm-3.6.0-py3-none-any.whl"}
en-core-web-md = {url = "https://github.com/explosion/spacy-models/releases/download/en_core_web_md-3.6.0/en_core_web_md-3.6.0-py3-none-any.whl"}
fr-core-news-sm = {url = "https://github.com/explosion/spacy-models/releases/download/fr_core_news_sm-3.6.0/fr_core_news_sm-3.6.0-py3-none-any.whl"}
fr-core-news-md = {url = "https://github.com/explosion/spacy-models/releases/download/fr_core_news_md-3.6.0/fr_core_news_md-3.6.0-py3-none-any.whl"}
scikit-learn="^1.5.0"
torch="^2.2.0"
sentencepiece="0.1.97"
transformers="^4.38.0"
websockets="10.0.0"

[tool.poetry.dev-dependencies]

[tool.poetry.scripts]
tkeir-converter-svc = "tkeir.thot.converter_svc:main"
tkeir-converter-client = "tkeir.thot.converter_client:main"
tkeir-tokenizer-svc = "tkeir.thot.tokenizer_svc:main"
tkeir-tokenizer-client = "tkeir.thot.tokenizer_client:main"
tkeir-mstagger-svc = "tkeir.thot.mstagger_svc:main" 
tkeir-mstagger-client = "tkeir.thot.mstagger_client:main" 
tkeir-nertagger-svc = "tkeir.thot.nertagger_svc:main"
tkeir-nertagger-client = "tkeir.thot.nertagger_svc:main"
tkeir-syntax-svc = "tkeir.thot.syntactictagger_svc:main"
tkeir-syntax-client = "tkeir.thot.syntactictagger_svc:main"
tkeir-keywords-svc = "tkeir.thot.keywordextractor_svc:main"
tkeir-keywords-client = "tkeir.thot.keywordextractor_client:main"
tkeir-sentiment-svc = "tkeir.thot.sentiment_svc:main"
tkeir-sentiment-client = "tkeir.thot.sentiment_client:main"
tkeir-summarizer-svc = "tkeir.thot.summarizer_svc:main"
tkeir-summarizer-client = "tkeir.thot.summarizer_client:main"
tkeir-zeroshotclassifier-svc = "tkeir.thot.zeroshotclassifier_svc:main"
tkeir-zeroshotclassifier-client = "tkeir.thot.zeroshotclassifier_client:main"
tkeir-embeddings-svc = "tkeir.thot.embeddings_svc:main"
tkeir-embeddings-client = "tkeir.thot.embeddings_client:main"
tkeir-clusterinfer-svc = "tkeir.thot.clusterinfer_svc:main"
tkeir-clusterinfer-cliebt = "tkeir.thot.clusterinfer_client:main"
tkeir-qa-svc = "tkeir.thot.qa_svc:main"
tkeir-qa-client = "tkeir.thot.qa_client:main"
tkeir-index-svc = "tkeir.thot.index_svc:main"
tkeir-index-client = "tkeir.thot.index_client:main"
tkeir-search-svc = "tkeir.thot.search_svc:main"
tkeir-search-client = "tkeir.thot.search_client:main"
tkeir-batch-ingester = "tkeir.thot.batch_ingester:main"
tkeir-init-project = "tkeir.thot.tkeir_init_project:main"
tkeir-relation-clustering = "tkeir.thot.relation_clustering:main"
tkeir-relation-stat = "tkeir.thot.relation_stats:main"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.isort]
profile = "black"

[tool.black]
line-length = 79
target-version = ["py38"]
preview = true

include = '\.pyi?$'
exclude = '''

(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.nox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
    | paper
    | docs
  )/
)
'''

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "--instafail"
testpaths = ["tests"]
markers = [
    "profile: marks tests to be profiled (deselect with '-m \"not profile\"')",
    "benchmark: marks tests to be benchmarked (deselect with '-m \"not benchmark\"')",
    "cli: marks tests for command line interfaces (deselect with '-m \"not cli\"')",
    "slow: marks slow tests (deselect with '-m \"not slow\"')",
]

[tool.liccheck]
authorized_licenses = [
    "BSD",
    "BSD license",
    "BSD-like",
    "new BSD",
    "new BSD license",
    "simplified BSD",
    "simplified BSD License",
    "4-clause BSD",
    "3-clause BSD",
    "2-clause BSD",
    "BSD-4-Clause",
    "BSD-3-Clause",
    "BSD-2-Clause",
    "BSD 4-Clause",
    "BSD 3-Clause",
    "BSD 2-Clause",
    "ISC",
    "ISC License (ISCL)",
    "Apache",
    "Apache license",
    "Apache 2.0",
    "Apache 2.0 license",
    "Apache License 2.0",
    "http://www.apache.org/licenses/LICENSE-2.0",
    "Apache Software",
    "Apache software license",
    "BSD-2-Clause or Apache-2.0",
    "MIT",
    "MIT license",
    "License :: OSI Approved :: MIT",
    "MIT X11 style",
    "Python",
    "Python Software Foundation",
    "Python Software Foundation license",
    "PSF",
    "Public Domain",
    "Public Domain <http://unlicense.org>",
    "unlicense",
    "LGPL",
    "Lesser GNU General Public License",
    "GNU Library or Lesser General Public License",
    "GNU Library or Lesser General Public License (LGPL)",
    "GNU Lesser General Public License v2 (LGPLv2)",
    "GNU Lesser General Public License v3 (LGPLv3)",
    "GNU Lesser General Public License v3 or later (LGPLv3+)",
    "LGPL-2.1-or-later",
    "LGPL-3-or-later",
    "Mozilla Public License 2.0 (MPL 2.0)",
    "MPL",
    "Historical Permission Notice and Disclaimer (HPND)",
    "HPND"
]
unauthorized_licenses = [
    "GPL v3",
    "GNU GPL v3",
    "GNU General Public License",
    "GNU General Public License v3 or later (GPLv3+)",
    "GPL",
    "GNU GPL",
    "GNU General Public License",
    "GPL v2",
    "GNU GPL v2",
    "GNU General Public License",
    "GNU General Public License v2 or later (GPLv2+)"
]

[tool.liccheck.authorized_packages]
# The following are allowed as long as it is not imported (linked) but used
# through command line calls
autoimport = "*"
hypothesis = ">=3.4"
pygal = "*"
pylint = "*"

# The following are sub-dependencies of the above tools
pathspec = "*"
text-unidecode = "*"
certifi = "*"

# the following projects are poorly configured. Under MIT License.
tomlkit = "*"
cachy = "*"
cleo = "*"
clikit = "*"
pastel = "*"
crashtest ="*"

[tool.mypy]
# Specify the target platform details in config, so your developers are
# free to run mypy on Windows, Linux, or macOS and get consistent
# results.
platform = "linux"
python_version = ">=3.7"

# show error messages from unrelated files
follow_imports = "normal"

# suppress errors about unsatisfied imports
ignore_missing_imports = true

# be strict
strict_optional = true
strict_equality = true

disallow_any_generics = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true

warn_return_any = true
warn_no_return = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

check_untyped_defs = true

no_implicit_optional = true
no_implicit_reexport = true

pretty = true

show_column_numbers = true
show_error_codes = true
show_error_context = true
